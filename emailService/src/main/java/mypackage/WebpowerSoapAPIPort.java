
package mypackage;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "WebpowerSoapAPIPort", targetNamespace = "http://dmdelivery.com/webservice/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
@XmlSeeAlso({
    ObjectFactory.class
})
public interface WebpowerSoapAPIPort {


    /**
     * 
     *             Check the health of Webpower's webservice.
     *             Specifically: check whether the webservice is available (http(s) access), and the database is up and
     *             responsive.
     *             Required credentials: none
     *             @param login: Webpower login object.
     *             @returns: true, when health is okay.
     *         
     * 
     * @param login
     * @return
     *     returns boolean
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "checkHealth_result", partName = "checkHealth_result")
    public boolean checkHealth(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login);

    /**
     * 
     *             Retrieve all brands from Webpower.
     *             Required credentials: 'export' privilege for area 'Brands'
     *             @param login: Webpower login object.
     *             @returns: An array of all brands in the Webpower environment.
     *         
     * 
     * @param login
     * @return
     *     returns mypackage.BrandArrayType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "getBrands_result", partName = "getBrands_result")
    public BrandArrayType getBrands(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login);

    /**
     * 
     *             Retrieve all campaigns from Webpower.
     *             Required credentials: 'export' privilege for area 'Campaigns'
     *             @param login: Webpower login object.
     *             @returns: An array of all campaigns in the Webpower environment.
     *         
     * 
     * @param login
     * @return
     *     returns mypackage.CampaignArrayType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "getCampaigns_result", partName = "getCampaigns_result")
    public CampaignArrayType getCampaigns(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login);

    /**
     * 
     *             Send a mailing to a single recipient. Mainly used for (un)subscribe confirmations etc.
     *             Of emails sent through this function, no statistics will be registered.
     *             Do not use this function to send many emails to many different recipients!
     *             Required credentials: access to area 'Send mailing'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param mailingID: The database ID of the mailing to send.
     *             @param recipientID: The database ID of the recipient to send to. Can be found via getRecipientsByMatch.
     *             @returns: true
     *         
     * 
     * @param campaignID
     * @param recipientID
     * @param login
     * @param mailingID
     * @return
     *     returns boolean
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "sendSingleMailing_result", partName = "sendSingleMailing_result")
    public boolean sendSingleMailing(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "mailingID", partName = "mailingID")
        int mailingID,
        @WebParam(name = "recipientID", partName = "recipientID")
        int recipientID);

    /**
     * 
     *             Bulk-send a mailing.
     *             Required credentials: access to area 'Send mailing'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param mailingID: The database ID of the mailing to send.
     *             @param isTest: Use true for test batch, false for definitive batch.
     *             @param resultsEmail: The email address of the person who should receive logfile.
     *             @param groupIDs: Array of (database IDs of) groups to send the mailing to. Provide at least one group.
     *             @param filterIDs: The database IDs of the filters to use for matching recipients.
     *             @param langs: An array of languages to send the mailing to. Ex: ('en', 'nl').
     *             @param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an
     *             (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
     *             @param callbackUrl: An (optional) url Webpower will call after the mailing has been sent.
     *             You can use the following variables in this URL, which Webpower will replace:
     *             - {$DMDcid} The campaign id
     *             - {$DMDmid} The mailing id
     *             - {$nrRecipients} The number of recipients in the batch
     *             - {$nrSent} The number of emails actually sent
     *             @param excludedGroupIDs: Array of (database IDs of) groups to not send the mailing to.
     *             @returns: status 'OK'
     *         
     * 
     * @param isTest
     * @param campaignID
     * @param filterIDs
     * @param excludedGroupIDs
     * @param groupIDs
     * @param langs
     * @param callbackUrl
     * @param login
     * @param mailingID
     * @param aDprefixDomains
     * @param resultsEmail
     * @return
     *     returns mypackage.ActionResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "sendMailing_result", partName = "sendMailing_result")
    public ActionResultType sendMailing(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "mailingID", partName = "mailingID")
        int mailingID,
        @WebParam(name = "isTest", partName = "isTest")
        boolean isTest,
        @WebParam(name = "resultsEmail", partName = "resultsEmail")
        String resultsEmail,
        @WebParam(name = "groupIDs", partName = "groupIDs")
        ArrayOfIntType groupIDs,
        @WebParam(name = "filterIDs", partName = "filterIDs")
        ArrayOfIntType filterIDs,
        @WebParam(name = "langs", partName = "langs")
        ArrayOfStringType langs,
        @WebParam(name = "ADprefixDomains", partName = "ADprefixDomains")
        String aDprefixDomains,
        @WebParam(name = "callbackUrl", partName = "callbackUrl")
        String callbackUrl,
        @WebParam(name = "excludedGroupIDs", partName = "excludedGroupIDs")
        ArrayOfIntType excludedGroupIDs);

    /**
     * 
     *             Create a mailing from scratch, providing raw HTML.
     *             The plaintext-message is inherited from the campaign's default plaintext message.
     *             Required credentials: 'insert' privilege for area 'Mailings'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param mailingName: The name to store the mailing as (must be unique!).
     *             @param lang: The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
     *             @param subject: The default subject of the mailing. Can be overwritten in the HTML to fetch.
     *             @param fromName: The from name.
     *             @param senderID: The database ID of the sender address. Use 0 for campaign's default sender address.
     *             @param html: The mailing's HTML.
     *             @param preheader: The preheader of the mailing.
     *             @returns: The database ID of the mailing that was created.
     *         
     * 
     * @param preheader
     * @param senderID
     * @param campaignID
     * @param subject
     * @param fromName
     * @param html
     * @param login
     * @param lang
     * @param mailingName
     * @return
     *     returns mypackage.RecordResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "createMailing_result", partName = "createMailing_result")
    public RecordResultType createMailing(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "mailingName", partName = "mailingName")
        String mailingName,
        @WebParam(name = "lang", partName = "lang")
        String lang,
        @WebParam(name = "subject", partName = "subject")
        String subject,
        @WebParam(name = "fromName", partName = "fromName")
        String fromName,
        @WebParam(name = "senderID", partName = "senderID")
        int senderID,
        @WebParam(name = "html", partName = "html")
        String html,
        @WebParam(name = "preheader", partName = "preheader")
        String preheader);

    /**
     * 
     *             Create a mailing from a URL.
     *             Required credentials: 'insert' privilege for area 'Mailings'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param mailingName: The name to store the mailing as (must be unique!).
     *             @param lang: The ISO-lang code for the mailing. Ex: 'nl', 'en', etc.
     *             @param subject: The default subject of the mailing. Can be overwritten in the HTML to fetch.
     *             @param fromName: The from name.
     *             @param senderID: The database ID of the sender address. Use 0 for campaign's default sender address.
     *             @param url: The url where the mailing HTML (or a ZIP file) can be fetched from.
     *             @param checkTimestamp: Whether or not to check the HTML for a <!--DMdeliveryTimestamp--> tag.
     *             Ignored for ZIP files.
     *             @param preheader: The preheader of the mailing.
     *             @returns: The database ID of the mailing that was created.
     *         
     * 
     * @param preheader
     * @param senderID
     * @param campaignID
     * @param subject
     * @param fromName
     * @param checkTimestamp
     * @param login
     * @param lang
     * @param mailingName
     * @param url
     * @return
     *     returns mypackage.RecordResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "slurpMailing_result", partName = "slurpMailing_result")
    public RecordResultType slurpMailing(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "mailingName", partName = "mailingName")
        String mailingName,
        @WebParam(name = "lang", partName = "lang")
        String lang,
        @WebParam(name = "subject", partName = "subject")
        String subject,
        @WebParam(name = "fromName", partName = "fromName")
        String fromName,
        @WebParam(name = "senderID", partName = "senderID")
        int senderID,
        @WebParam(name = "url", partName = "url")
        String url,
        @WebParam(name = "checkTimestamp", partName = "checkTimestamp")
        boolean checkTimestamp,
        @WebParam(name = "preheader", partName = "preheader")
        String preheader);

    /**
     * 
     *             Retrieve all mailings from a Webpower campaign. Mailings are returned from new to old (newest on top).
     *             Required credentials: 'export' privilege for area 'Mailings'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param limit: indicates the number of mailings to retrieve. Use 0 to retrieve *all* mailings.
     *             @param definitiveOnly: Whether or not to only return definitively sent mailings.
     *             @returns: An array of all mailings in the campaign.
     *         
     * 
     * @param campaignID
     * @param limit
     * @param login
     * @param definitiveOnly
     * @return
     *     returns mypackage.MailingArrayType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "getMailings_result", partName = "getMailings_result")
    public MailingArrayType getMailings(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "limit", partName = "limit")
        int limit,
        @WebParam(name = "definitiveOnly", partName = "definitiveOnly")
        boolean definitiveOnly);

    /**
     * 
     *             Retrieve summarized statistics for a mailing sent. Mailing must be sent in order to be able to do this.
     *             Required credentials: access to area 'Statistics'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param mailingID: The database ID of the mailing to fetch the summary for.
     *             @returns: An array containing summary stats info (sent, bounces, unsubscribers, opens, clicks,
     *             conversion etc).
     *         
     * 
     * @param campaignID
     * @param login
     * @param mailing
     * @return
     *     returns mypackage.MailingStatsSummaryResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "getMailingStatsSummary_result", partName = "getMailingStatsSummary_result")
    public MailingStatsSummaryResultType getMailingStatsSummary(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "mailing", partName = "mailing")
        int mailing);

    /**
     * 
     *             Retrieve all groups from a Webpower campaign.
     *             Required credentials: 'export' privilege for area 'Groups'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @returns: An array of all groups in the campaign.
     *         
     * 
     * @param campaignID
     * @param login
     * @return
     *     returns mypackage.GroupArrayType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "getGroups_result", partName = "getGroups_result")
    public GroupArrayType getGroups(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID);

    /**
     * 
     *             Delete a mailing from a campaign.
     *             Required credentials: 'delete' privilege for area 'Mailings'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param mailingID: The database ID of the mailing to delete.
     *             @returns: 'OK' or 'ERROR'
     *         
     * 
     * @param campaignID
     * @param login
     * @param mailingID
     * @return
     *     returns mypackage.RecordResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "deleteMailing_result", partName = "deleteMailing_result")
    public RecordResultType deleteMailing(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "mailingID", partName = "mailingID")
        int mailingID);

    /**
     * 
     *             Add a new group to this Webpower campaign.
     *             Required credentials: 'insert' privilege for area 'Groups'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param group: The characteristics of the group to add.
     *             @returns: The database ID of the newly created group.
     *         
     * 
     * @param campaignID
     * @param login
     * @param group
     * @return
     *     returns mypackage.RecordResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "addGroup_result", partName = "addGroup_result")
    public RecordResultType addGroup(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "group", partName = "group")
        NewGroupType group);

    /**
     * 
     *             Flush all recipients from a recipient group, then delete the group.
     *             The recipients are 'disconnected' from the group, not physically deleted.
     *             Afterwards, the group will no longer exist.
     *             Required credentials: 'delete' privilege for area 'Groups'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param groupID: The database ID of the group to delete.
     *             @returns: Number of groups (0 or 1) actually deleted.
     *         
     * 
     * @param campaignID
     * @param groupID
     * @param login
     * @return
     *     returns int
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "deleteGroup_result", partName = "deleteGroup_result")
    public int deleteGroup(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "groupID", partName = "groupID")
        int groupID);

    /**
     * 
     *             Add a new recipient to a Webpower campaign.
     *             Required credentials: 'insert' privilege for area 'Recipients'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param groupIDs: An array of groups (database IDs) to make the recipient a member of. Provide at least
     *             one group. If this array *only* contains the ID of the Opt-in group (60), *and* this is a non-existing
     *             recipient, the opt-in confirmation email will be sent to the recipient.
     *             @param recipientData: An associative array (key: name of field, value: value of field) containing
     *             recipient data.
     *             @param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in
     *             the database already.
     *             @param overwrite: In case the recipient already exists, whether or not to overwrite the known recipient
     *             data with the new data provided.
     *             @returns: The database ID of the newly created recipient.
     *         
     * 
     * @param addDuplisToGroups
     * @param campaignID
     * @param groupIDs
     * @param recipientData
     * @param login
     * @param overwrite
     * @return
     *     returns mypackage.RecordResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "addRecipient_result", partName = "addRecipient_result")
    public RecordResultType addRecipient(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "groupIDs", partName = "groupIDs")
        ArrayOfIntType groupIDs,
        @WebParam(name = "recipientData", partName = "recipientData")
        NewRecipientType recipientData,
        @WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups")
        boolean addDuplisToGroups,
        @WebParam(name = "overwrite", partName = "overwrite")
        boolean overwrite);

    /**
     * 
     *             Add multiple new recipients to Webpower (max 1000 at once).
     *             Required credentials: 'insert' privilege for area 'Recipients'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least
     *             one group.
     *             @param recipientDatas: An array of associative arrays (key: name of field, value: value of field)
     *             containing recipient data.
     *             @param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in
     *             the database already.
     *             @param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient
     *             data with the new data provided.
     *             @returns: Complex datatype, containing all successfully inserted records (including the ID assigned by
     *             Webpower), duplicates and/or errors.
     *         
     * 
     * @param addDuplisToGroups
     * @param campaignID
     * @param groupIDs
     * @param recipientDatas
     * @param login
     * @param overwrite
     * @return
     *     returns mypackage.AddRecipientsResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "addRecipients_result", partName = "addRecipients_result")
    public AddRecipientsResultType addRecipients(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "groupIDs", partName = "groupIDs")
        ArrayOfIntType groupIDs,
        @WebParam(name = "recipientDatas", partName = "recipientDatas")
        NewRecipientArrayType recipientDatas,
        @WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups")
        boolean addDuplisToGroups,
        @WebParam(name = "overwrite", partName = "overwrite")
        boolean overwrite);

    /**
     * 
     *             Import recipients (max 1000 at once), while sending a (definitive) mailing to them.
     *             Required credentials: 'insert' privilege for area 'Recipients' AND access to area 'Send mailing'
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param mailingID: The database ID of the mailing to send.
     *             @param groupIDs: An array of groups (database IDs) to make the recipients a member of. Provide at least
     *             one group.
     *             @param recipientDatas: An array of associative arrays (key: name of field, value: value of field)
     *             containing recipient data.
     *             @param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in
     *             the database already.
     *             @param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient
     *             data with the new data provided.
     *             @returns: Complex datatype, containing all duplicates and/or errors.
     *         
     * 
     * @param addDuplisToGroups
     * @param campaignID
     * @param groupIDs
     * @param recipientDatas
     * @param login
     * @param mailingID
     * @param overwrite
     * @return
     *     returns mypackage.AddRecipientsResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "addRecipientsSendMailing_result", partName = "addRecipientsSendMailing_result")
    public AddRecipientsResultType addRecipientsSendMailing(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "mailingID", partName = "mailingID")
        int mailingID,
        @WebParam(name = "groupIDs", partName = "groupIDs")
        ArrayOfIntType groupIDs,
        @WebParam(name = "recipientDatas", partName = "recipientDatas")
        NewRecipientArrayType recipientDatas,
        @WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups")
        boolean addDuplisToGroups,
        @WebParam(name = "overwrite", partName = "overwrite")
        boolean overwrite);

    /**
     * 
     *             Import a remotely located CSV or ZIP file, containing recipient info, into Webpower.
     *             A ZIP file must contain only one file with the extension .csv.
     *             Supports http, https, ftp, sftp, ftps and scp protocols.
     *             Required credentials: 'import' privilege for area 'Recipients'
     *             Errors and Duplicates are uploaded back to the same location the CSV was downloaded from.
     *             For example, if this is the CSV file:
     *             - ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
     *             Then errors and duplicates will be available here when the import has finished:
     *             - ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.errors
     *             - ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.duplis
     *             The 'callbackUrl' argument is used to let you know when the import is finished.
     *             This can be an email address: An email is sent to this address when import is finished.
     *             This can be a URL: The URL is fetched when import is finished. The URL may contain the following
     *             placeholders: {$DMDcid}, {$nrLines}, {$nrDuplicates} and {$nrErrors}
     * 
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param groupID: The ID of the group to import the recipients into.
     *             @param csvURL: The URL of the CSV file. Examples:
     *             - http://username:password@somewhere.server.com:80/recipients.csv
     *             - ftp://username:password@somewhere.server.com/incoming/recipients.csv
     *             - sftp://username:password@somewhere.server.com/root/csvs/recipients.csv
     *             @param csvCharset: The character set of the CSV file. For example: utf-8, iso-8859-1, gb18030
     *             @param csvFieldSep: The field separator character used in the CSV file.
     *             @param csvEnclosure: The enclosure character used in the CSV file.
     *             @param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in
     *             the database already.
     *             @param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient
     *             data with the new data provided.
     *             @param callbackUrl: Either an email address or a URL. Will be emailed/called when import is done.
     *             @returns: 'OK', when remote file could be found or 'ERROR' if not.
     *         
     * 
     * @param csvURL
     * @param csvCharset
     * @param addDuplisToGroups
     * @param campaignID
     * @param groupID
     * @param callbackUrl
     * @param login
     * @param overwrite
     * @param csvFieldSep
     * @param csvEnclosure
     * @return
     *     returns mypackage.RecordResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "importRemoteCSV_result", partName = "importRemoteCSV_result")
    public RecordResultType importRemoteCSV(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "groupID", partName = "groupID")
        int groupID,
        @WebParam(name = "csvURL", partName = "csvURL")
        String csvURL,
        @WebParam(name = "csvCharset", partName = "csvCharset")
        String csvCharset,
        @WebParam(name = "csvFieldSep", partName = "csvFieldSep")
        String csvFieldSep,
        @WebParam(name = "csvEnclosure", partName = "csvEnclosure")
        String csvEnclosure,
        @WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups")
        boolean addDuplisToGroups,
        @WebParam(name = "overwrite", partName = "overwrite")
        boolean overwrite,
        @WebParam(name = "callbackUrl", partName = "callbackUrl")
        String callbackUrl);

    /**
     * 
     *             Import a remotely located CSV or ZIP file, containing recipient info, into Webpower.
     *             A ZIP file must contain only one file with the extension .csv.
     *             Send a mailing to this group (optionally applying filter/language) when import is finished.
     *             Supports http, https, ftp, sftp, ftps and scp protocols.
     *             Required credentials: 'import' privilege for area 'Recipients' and access to area 'Send mailing'
     *             Errors and Duplicates are uploaded back to the same location the CSV was downloaded from.
     *             For example, if this is the CSV file:
     *             - ftp://username:password@somewhere.server.com:80/incoming/recipients.csv
     *             Then errors and duplicates will be available here when the import has finished:
     *             - ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.errors
     *             - ftp://username:password@somewhere.server.com:80/incoming/recipients.csv.duplis
     * 
     *             @param login: Webpower login object.
     *             @param campaignID: The database ID of the campaign to work with.
     *             @param groupID: The ID of the group to import the recipients into.
     *             @param csvURL: The URL of the CSV file. Examples:
     *             - http://username:password@somewhere.server.com:80/recipients.csv
     *             - ftp://username:password@somewhere.server.com/incoming/recipients.csv
     *             - sftp://username:password@somewhere.server.com/root/csvs/recipients.csv
     *             @param csvCharset: The character set of the CSV file. For example: utf-8, iso-8859-1, gb18030
     *             @param csvFieldSep: The field separator character used in the CSV file.
     *             @param csvEnclosure: The enclosure character used in the CSV file.
     *             @param addDuplisToGroup: Whether or not to add this recipient to the groups, when the recipient is in
     *             the database already.
     *             @param overwrite: In case a recipient already exists, whether or not to overwrite the known recipient
     *             data with the new data provided.
     *             @param mailingID: The database ID of the mailing to send.
     *             @param resultsEmail: The email address of the person who should receive logfile.
     *             @param filterIDs: The database IDs of the filters to use for matching recipients.
     *             @param langs: An array of languages to send the mailing to. Ex: ('en', 'nl').
     *             @param ADprefixDomains: Optional and for China only: A comma-separated string of domains that need an
     *             (AD) prefix. For example: *163.com,*126.com,yeah.net,188.com.
     *             @param callbackUrl: An (optional) url Webpower will call after the mailing has been sent.
     *             You can use the following variables in this URL, which Webpower will replace:
     *             - {$DMDcid} The campaign id
     *             - {$DMDmid} The mailing id
     *             - {$nrRecipients} The number of recipients in the batch
     *             - {$nrSent} The number of emails actually sent
     *             @returns: status 'OK'
     *         
     * 
     * @param addDuplisToGroups
     * @param campaignID
     * @param groupID
     * @param login
     * @param mailingID
     * @param aDprefixDomains
     * @param csvEnclosure
     * @param resultsEmail
     * @param csvURL
     * @param csvCharset
     * @param filterIDs
     * @param langs
     * @param callbackUrl
     * @param overwrite
     * @param csvFieldSep
     * @return
     *     returns mypackage.RecordResultType
     */
    @WebMethod(action = "urn:WebpowerAction")
    @WebResult(name = "importRemoteCSVSendMailing_result", partName = "importRemoteCSVSendMailing_result")
    public RecordResultType importRemoteCSVSendMailing(
        @WebParam(name = "login", partName = "login")
        WebpowerLoginType login,
        @WebParam(name = "campaignID", partName = "campaignID")
        int campaignID,
        @WebParam(name = "groupID", partName = "groupID")
        int groupID,
        @WebParam(name = "csvURL", partName = "csvURL")
        String csvURL,
        @WebParam(name = "csvCharset", partName = "csvCharset")
        String csvCharset,
        @WebParam(name = "csvFieldSep", partName = "csvFieldSep")
        String csvFieldSep,
        @WebParam(name = "csvEnclosure", partName = "csvEnclosure")
        String csvEnclosure,
        @WebParam(name = "addDuplisToGroups", partName = "addDuplisToGroups")
        boolean addDuplisToGroups,
        @WebParam(name = "overwrite", partName = "overwrite")
        boolean overwrite,
        @WebParam(name = "mailingID", partName = "mailingID")
        int mailingID,
        @WebParam(name = "resultsEmail", partName = "resultsEmail")
        String resultsEmail,
        @WebParam(name = "filterIDs", partName = "filterIDs")
        ArrayOfIntType filterIDs,
        @WebParam(name = "langs", partName = "langs")
        ArrayOfStringType langs,
        @WebParam(name = "ADprefixDomains", partName = "ADprefixDomains")
        String aDprefixDomains,
        @WebParam(name = "callbackUrl", partName = "callbackUrl")
        String callbackUrl);
}
